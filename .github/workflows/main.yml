# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: remindful

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      REDIS_URL: redis://localhost:6379
      DATABASE_URL: postgresql://remindful:remindful@localhost/remindful_server_test
      RAILS_ENV: test
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: remindful
          POSTGRES_PASSWORD: remindful
          POSTGRES_DB: remindful_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set docker tag
        id: set-docker-tag
        run: |
          IMAGE_TAG=$(git describe --tags --always)
          echo "Image tag will be $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" > docker-tag.sh
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - uses: actions/setup-node@v1
        with:
          node-version: '15.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/yarn
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: bundle exec rake db:migrate --trace
      - run: yarn install --pure-lockfile
      - run: bundle exec rspec --profile 10
      - name: Store docker tag
        uses: actions/upload-artifact@v2
        with:
          name: docker-tag
          path: docker-tag.sh

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Load docker tag
        uses: actions/download-artifact@v2
        with:
          name: docker-tag
      - name: Set docker tag
        id: set-docker-tag
        run: |
          cat docker-tag.sh
          cat docker-tag.sh >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          MASTER_KEY: ${{ secrets.MASTER_KEY }}
        run: |
          docker buildx build --build-arg "MASTER_KEY=$MASTER_KEY" --tag "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" --tag "$ECR_REGISTRY/$ECR_REPOSITORY:latest" --output "type=image,push=true" .
