version: 2.1

dockerhub-auth: &dockerhub-auth
  auth:
    username: $DOCKERHUB_USERNAME
    password: $DOCKERHUB_PASSWORD
orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
jobs:
  test:
    docker:
      - image: cimg/ruby:3.0.0-node
        <<: *dockerhub-auth
        environment:
          RAILS_ENV: test
          REDIS_URL: redis://localhost:6379/0
          DATABASE_URL: 'postgresql://circleci@localhost/remindful_server_test'

      - image: circleci/postgres:latest
        <<: *dockerhub-auth
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: remindful_server_test
          POSTGRES_HOST_AUTH_METHOD: trust

      - image: circleci/redis:5.0.0
        <<: *dockerhub-auth

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - restore_cache:
          keys:
            - yarn-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: yarn dependencies
          command: yarn install
      - save_cache:
          paths:
            - ./node_modules
          key: yarn-deps-{{ checksum "yarn.lock" }}
      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # Database setup
      - run: bundle exec rake db:create db:migrate --trace
      # run tests!
      - run:
          name: Run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $TEST_FILES
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  build_deploy:
    docker:
      - image: cimg/ruby:3.0.0-node
        <<: *dockerhub-auth
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - aws-ecr/build-and-push-image:
          account-url: ECR_PATH
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          region: AWS_REGION
          repo: remindful
          tag: '$(git describe --abbrev=0 --tags HEAD | sed "s/^\(.*\)\.[0-9]\{1,4\}\$/\1/").$(git show -s --format=%ct)'
          extra-build-args: "--build-arg MASTER_KEY=$MASTER_KEY"
      - run:
          command: echo $GITHUB_TOKEN
      - run:
          name: Update helm chart
          command: |
            TAG="$(git describe --abbrev=0 --tags HEAD | sed "s/^\(.*\)\.[0-9]\{1,4\}\$/\1/").$(git show -s --format=%ct)"
            git clone https://dhbtk:$GITHUB_TOKEN@github.com/dhbtk/dhbtk-charts /tmp/dhbtk-charts
            cd /tmp/dhbtk-charts
            sed -Ei 's/^version:\s+\"([0-9.]+).([0-9]+)"/echo "version: \"\1.$((\2+1))\""/e' remindful/Chart.yaml
            sed -Ei "s/^appVersion: .+/appVersion: \"$TAG\"/" remindful/Chart.yaml
            git config --global user.email circleci@circleci
            git config --global user.name CircleCI
            git add remindful
            git commit -m "remindful build: $TAG"
            git push

workflows:
  version: 2
  test_build_deploy:
    jobs:
      - test:
          context: "ECR/nuvem"
          filters:
            tags:
              only: /.*/
      - build_deploy:
          context: "ECR/nuvem"
          requires:
            - test
          filters:
            branches:
              only: main
